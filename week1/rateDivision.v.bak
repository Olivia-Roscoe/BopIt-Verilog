`timescale 1ns/1ns

module rateDivision (CLOCK_50,enabler,KEY0, HEX0, HEX1);

	input CLOCK_50;
	input KEY0;
	output enabler;
	output [6:0] HEX0, HEX1;
	wire enable;
	reg [27:0]count1;
	reg [7:0]count2;
	reg [27:0]RateDivider;
	
	initial count1 = 28'd0;
	initial count2 = 8'd0;
	initial RateDivider = 28'd100000000;

	
	assign enable = (count1 >= RateDivider)?1'b1:1'b0;
	
	
	assign enabler = enable;
	
	
	
	always@(posedge CLOCK_50)
	begin
		if (!KEY0)
			begin
			count1 <= 28'd0;
			count2 <= 8'd0;
			end
		if (enable)
			count1 <= 28'd0;
		else
			count1 <= count1 + 1'b1;

		if (enable)
			count2 <= count2 + 1'b1;
	end
	


	always@(posedge CLOCK_50)
	begin
	
		if (count2 < 8'd5)
			RateDivider <= 27'd100000000;
		else if (count2 < 8'd10)
			RateDivider <= 26'd50000000;
		else if (count2 < 8'd15)
			RateDivider <= 27'd37500000;
		else if (count2 <8'd20)
			RateDivider <= 28'd25000000;
	end
	
	hexdisplay h0(HEX0, count2[3], count2[2], count2[1], count2[0]);
	hexdisplay h1(HEX1, count2[7], count2[6], count2[5], count2[4]);
	
	/*
	always@(posedge CLOCK_50)
	begin
	
		if (count2 < 8'd5)
			RateDivider <= 27'd5;
		else if (count2 < 8'd10)
			RateDivider <= 26'd3;
		else if(count2 < 8'd15)
			RateDivider <= 27'd1;

	end
	*/
	
endmodule

module hexdisplay (HEX,c3,c2,c1,c0);
		input c3, c2, c1, c0; //Input singals where c3 is SW[3],c2 is SW[2],c1 is SW[1],c0 is SW[0]
		output [6:0] HEX; //Output signals to hexdisplay segments
		
		assign HEX[0] = (~c3 & ~c2 & ~c1 & c0) | (~c3 & c2 & ~c1 & ~c0) | (c3 & ~c2 & c1 & c0) | (c3 & c2 & ~c1 & c0); 
		assign HEX[1] = (~c3 & c2 & ~c1 & c0) | (~c3 & c2 & c1 & ~c0) | (c3 & ~c2 & c1 & c0) | (c3 & c2 & ~c1 & ~c0) | (c3 & c2 & c1 & ~c0) | (c3 & c2 & c1 & c0);
		assign HEX[2] = (~c3 & ~c2 & c1 & ~c0)|(c3 & c2 & ~c1 & ~c0) | (c3 & c2 & c1 & ~c0) | (c3 & c2 & c1 & c0);
		assign HEX[3] = (~c3 & ~c2 & ~c1 & c0) | (~c3 & c2 & ~c1 & ~c0) | (~c3 & c2 & c1 & c0) | (c3 & ~c2 & c1 & ~c0) | (c3 & c2 & c1 & c0);
		assign HEX[4] = (~c3 & ~c2 & ~c1 & c0) | (~c3 & ~c2 & c1 & c0) | (~c3 & c2 & ~c1 & ~c0) | (~c3 & c2 & ~c1 & c0) | (~c3 & c2 & c1 & c0) | (c3 & ~c2 & ~c1 & c0);
		assign HEX[5] =  (~c3 & ~c2 & ~c1 & c0) | (~c3 & ~c2 & c1 & ~c0) | (~c3 & ~c2 & c1 & c0) | (~c3 & c2 & c1 & c0) | (c3 & c2 & ~c1 & c0);
		assign HEX[6] = (~c3 & ~c2 & ~c2 & ~c1 & ~c0) | (~c3 & ~c2 & ~c1 & c0) | (~c3 & c2 & c1 & c0) | (c3 & c2 & ~c1 & ~c0);
		
endmodule 